[alias]
  # Init
  i = init

  # Branch readout
  br = branch

  # Checkout branch
  co = checkout

  # Go back to previous branch
  bb = checkout -

  # Branch switch to master
  h = checkout master

  # Remote readout
  re = remote

  # View log all pretty like
  ll = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -su

  # View the current working tree status
  st = status

  # Show the diff between the latest commit and the current state using difftool
  d = difftool

  # Show the diff between the latest commit and the current state
  dd = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # This alias downloads all of the latest commits from all upstream branches (pruning the dead branches)
  # and tries to fast-forward the local branch to the latest commit on the upstream branch.
  # http://stackoverflow.com/questions/15316601/in-what-cases-could-git-pull-be-harmful/15316602#15316602
  up = !"git remote update -p; git merge --ff-only @{u}"

  # Push all changes & tags
  pp = !git push && git push --tags

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit
  ci = commit

  # Commit all changes
  ca = !git add -A && git commit -a

  # Undo last commit
  uu = reset --soft HEAD^

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Merge branches, keeping historical existence of the merged branch
  m = merge --no-ff

  # Regular merge
  mg = merge

  # Merge using mergetool
  mt = mergetool

  # Show merged branches with master
  sm = branch --merged

  # Show unmerged branches with master
  um = branch --no-merged

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Track branch
  tr = "!tr() { git branch --set-upstream-to=origin/$1 $1; }; tr"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Run gitignore.io
  ig = "!gi() { curl http://www.gitignore.io/api/$@ ;}; gi"

  # do a fresh `up` and chase it with a `dm`
  cl = !"git up && git dm"
[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
  tool = Kaleidoscope
[difftool]
  prompt = false

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustexitcode = true
[mergetool]
  prompt = false
[merge]
  tool = Kaleidoscope
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = simple

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"
